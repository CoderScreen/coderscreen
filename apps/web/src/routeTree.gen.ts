/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppTestRouteImport } from './routes/_app/test'
import { Route as AppRoomsRouteImport } from './routes/_app/rooms'
import { Route as AppProfileRouteImport } from './routes/_app/profile'
import { Route as authVerifyRouteImport } from './routes/(auth)/verify'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as RoomRoomIdIndexRouteImport } from './routes/room/$roomId/index'
import { Route as RoomRoomIdSummaryRouteImport } from './routes/room/$roomId/summary'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppTestRoute = AppTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => AppRoute,
} as any)
const AppRoomsRoute = AppRoomsRouteImport.update({
  id: '/rooms',
  path: '/rooms',
  getParentRoute: () => AppRoute,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRoute,
} as any)
const authVerifyRoute = authVerifyRouteImport.update({
  id: '/(auth)/verify',
  path: '/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoomIdIndexRoute = RoomRoomIdIndexRouteImport.update({
  id: '/room/$roomId/',
  path: '/room/$roomId/',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoomIdSummaryRoute = RoomRoomIdSummaryRouteImport.update({
  id: '/room/$roomId/summary',
  path: '/room/$roomId/summary',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/verify': typeof authVerifyRoute
  '/profile': typeof AppProfileRoute
  '/rooms': typeof AppRoomsRoute
  '/test': typeof AppTestRoute
  '/': typeof AppIndexRoute
  '/room/$roomId/summary': typeof RoomRoomIdSummaryRoute
  '/room/$roomId': typeof RoomRoomIdIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/verify': typeof authVerifyRoute
  '/profile': typeof AppProfileRoute
  '/rooms': typeof AppRoomsRoute
  '/test': typeof AppTestRoute
  '/': typeof AppIndexRoute
  '/room/$roomId/summary': typeof RoomRoomIdSummaryRoute
  '/room/$roomId': typeof RoomRoomIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(auth)/verify': typeof authVerifyRoute
  '/_app/profile': typeof AppProfileRoute
  '/_app/rooms': typeof AppRoomsRoute
  '/_app/test': typeof AppTestRoute
  '/_app/': typeof AppIndexRoute
  '/room/$roomId/summary': typeof RoomRoomIdSummaryRoute
  '/room/$roomId/': typeof RoomRoomIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/verify'
    | '/profile'
    | '/rooms'
    | '/test'
    | '/'
    | '/room/$roomId/summary'
    | '/room/$roomId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/verify'
    | '/profile'
    | '/rooms'
    | '/test'
    | '/'
    | '/room/$roomId/summary'
    | '/room/$roomId'
  id:
    | '__root__'
    | '/_app'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(auth)/verify'
    | '/_app/profile'
    | '/_app/rooms'
    | '/_app/test'
    | '/_app/'
    | '/room/$roomId/summary'
    | '/room/$roomId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  authVerifyRoute: typeof authVerifyRoute
  RoomRoomIdSummaryRoute: typeof RoomRoomIdSummaryRoute
  RoomRoomIdIndexRoute: typeof RoomRoomIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/test': {
      id: '/_app/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof AppTestRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/rooms': {
      id: '/_app/rooms'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof AppRoomsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRoute
    }
    '/(auth)/verify': {
      id: '/(auth)/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof authVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room/$roomId/': {
      id: '/room/$roomId/'
      path: '/room/$roomId'
      fullPath: '/room/$roomId'
      preLoaderRoute: typeof RoomRoomIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room/$roomId/summary': {
      id: '/room/$roomId/summary'
      path: '/room/$roomId/summary'
      fullPath: '/room/$roomId/summary'
      preLoaderRoute: typeof RoomRoomIdSummaryRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AppRouteChildren {
  AppProfileRoute: typeof AppProfileRoute
  AppRoomsRoute: typeof AppRoomsRoute
  AppTestRoute: typeof AppTestRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppProfileRoute: AppProfileRoute,
  AppRoomsRoute: AppRoomsRoute,
  AppTestRoute: AppTestRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  authVerifyRoute: authVerifyRoute,
  RoomRoomIdSummaryRoute: RoomRoomIdSummaryRoute,
  RoomRoomIdIndexRoute: RoomRoomIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
